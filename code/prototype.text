function myPrototype() {
    //Basic Properties
	this.myProperty = 'someValue';
	// object literals can contain properties and methods.
	// here, another object is defined for configuration
	// purposes:
	this.myConfig = {
		useCaching : true,
		language : 'en'
	};

};
// a very basic method
myPrototype.prototype.myMethod = function () {
    console.log('I can haz functionality?');
};
// output a value based on current configuration
myPrototype.prototype.myMethod2 = function () {
    console.log('Caching is:' + (this.myConfig.useCaching) ? 'enabled' : 'disabled');
};
// override the current configuration
myPrototype.prototype.myMethod3 = function (newConfig) {
    if (typeof newConfig == 'object') {
        this.myConfig = newConfig;
        console.log(this.myConfig.language);
    }
}
var obj1 = new myPrototype();
obj1.myMethod(); // I can haz functionality
obj1.myMethod2(); // outputs enabled
obj1.myMethod3({
	language : 'fr',
	useCaching : false
}); // fr